// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Epsilon5.proto

#ifndef PROTOBUF_Epsilon5_2eproto__INCLUDED
#define PROTOBUF_Epsilon5_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Epsilon5 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Epsilon5_2eproto();
void protobuf_AssignDesc_Epsilon5_2eproto();
void protobuf_ShutdownFile_Epsilon5_2eproto();

class Player;
class World;

// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();
  
  Player(const Player& from);
  
  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();
  
  void Swap(Player* other);
  
  // implements Message ----------------------------------------------
  
  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double vx = 3;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 3;
  inline double vx() const;
  inline void set_vx(double value);
  
  // required double vy = 4;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 4;
  inline double vy() const;
  inline void set_vy(double value);
  
  // required int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Epsilon5.Player)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double vx_;
  double vy_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class World : public ::google::protobuf::Message {
 public:
  World();
  virtual ~World();
  
  World(const World& from);
  
  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const World& default_instance();
  
  void Swap(World* other);
  
  // implements Message ----------------------------------------------
  
  World* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const World& from);
  void MergeFrom(const World& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Epsilon5.Player players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::Epsilon5::Player& players(int index) const;
  inline ::Epsilon5::Player* mutable_players(int index);
  inline ::Epsilon5::Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:Epsilon5.World)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Epsilon5_2eproto();
  friend void protobuf_AssignDesc_Epsilon5_2eproto();
  friend void protobuf_ShutdownFile_Epsilon5_2eproto();
  
  void InitAsDefaultInstance();
  static World* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// required double x = 1;
inline bool Player::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Player::x() const {
  return x_;
}
inline void Player::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool Player::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Player::y() const {
  return y_;
}
inline void Player::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double vx = 3;
inline bool Player::has_vx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_vx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_vx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline double Player::vx() const {
  return vx_;
}
inline void Player::set_vx(double value) {
  set_has_vx();
  vx_ = value;
}

// required double vy = 4;
inline bool Player::has_vy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_vy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_vy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline double Player::vy() const {
  return vy_;
}
inline void Player::set_vy(double value) {
  set_has_vy();
  vy_ = value;
}

// required int32 id = 5;
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Player::id() const {
  return id_;
}
inline void Player::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 6;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  return *name_;
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// World

// repeated .Epsilon5.Player players = 1;
inline int World::players_size() const {
  return players_.size();
}
inline void World::clear_players() {
  players_.Clear();
}
inline const ::Epsilon5::Player& World::players(int index) const {
  return players_.Get(index);
}
inline ::Epsilon5::Player* World::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::Epsilon5::Player* World::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >&
World::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::Epsilon5::Player >*
World::mutable_players() {
  return &players_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Epsilon5

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Epsilon5_2eproto__INCLUDED
